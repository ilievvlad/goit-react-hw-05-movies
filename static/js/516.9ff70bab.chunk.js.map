{"version":3,"file":"static/js/516.9ff70bab.chunk.js","mappings":"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","sources":["components/Common/Common.styled.jsx","components/Movies/Movies.styled.jsx","constans/ImageURL.js","constans/Status.js","components/Movies/Movies.jsx","pages/HomePage/HomePage.jsx","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.section`\n\tpadding: 60px 0;\n`;\n\nexport const Title = styled.h1`\n\tfont-weight: 600;\n\tfont-size: 26px;\n\twhite-space: nowrap;\n\tdisplay: flex;\n\talign-items: center;\n\tflex-direction: row-reverse;\n\tcolumn-gap: 20px;\n\tmargin-bottom: 25px;\n\n\t&::before {\n\t\tcontent: \"\";\n\t\tdisplay: inline-block;\n\t\twidth: 100%;\n\t\theight: 1px;\n\t\tbackground-color: var(--accent);\n\t\ttransform: translateY(2px);\n\t}\n`;\n\nexport const NotFound = styled.p`\n\tfont-weight: 600;\n\tfont-size: 22px;\n\tcolor: var(--accent);\n`;\n\nexport const Loading = styled.p`\n\tfont-size: 20px;\n\tcolor: var(--gray);\n`;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tcolumn-gap: 20px;\n\trow-gap: 40px;\n`;\n\nexport const Item = styled.li`\n\twidth: 232px;\n\tflex-basis: calc((100% - 20px * (5 - 1)) / 5);\n`;\n\nexport const ImageBox = styled.div`\n\theight: 350px;\n\n\timg {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tborder-radius: 10px;\n\t}\n`;\n\nexport const TitleMovie = styled.h2`\n\tfont-weight: 600;\n\tmargin-top: 8px;\n\tline-height: 1.5;\n\tpadding-right: 10px;\n\twhite-space: nowrap;\n\toverflow: hidden;\n\ttext-overflow: ellipsis;\n`;","export const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';","export const STATUS = {\n\tidle: 'idle',\n\tloading: 'loading',\n\tsuccess: 'success',\n\terror: 'error',\n}","import PropTypes from \"prop-types\";\nimport { Link, useLocation } from \"react-router-dom\";\n\nimport { IMAGE_URL } from \"constans/ImageURL\";\nimport imageReplace from \"images/poster-not-found.jpg\";\n\nimport { ImageBox, Item, List, TitleMovie } from \"./Movies.styled\";\n\nexport const Movies = ({ movies }) => {\n\tconst location = useLocation();\n\n\treturn (\n\t\t<List>\n\t\t\t{movies.map(({ id, img, title }) => (\n\t\t\t\t<Item key={id}>\n\t\t\t\t\t<Link to={`movies/${id}`} state={{ from: location }}>\n\t\t\t\t\t\t<ImageBox>\n\t\t\t\t\t\t\t{img ? (\n\t\t\t\t\t\t\t\t<img src={`${IMAGE_URL}` + img} alt={title} width={232} height={350} />\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<img src={imageReplace} alt=\"Plug\" width={232} height={350} />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</ImageBox>\n\t\t\t\t\t\t<TitleMovie>{title}</TitleMovie>\n\t\t\t\t\t</Link>\n\t\t\t\t</Item>\n\t\t\t))}\n\t\t</List>\n\t);\n};\n\nMovies.propTypes = {\n\tmovies: PropTypes.arrayOf(\n\t\tPropTypes.shape({\n\t\t\tid: PropTypes.number.isRequired,\n\t\t\timg: PropTypes.string.isRequired,\n\t\t\ttitle: PropTypes.string.isRequired,\n\t\t}).isRequired\n\t).isRequired,\n};","import { useState, useEffect } from \"react\";\n\nimport { fetchTrendingMovies } from \"services/moviesApi\";\nimport { STATUS } from \"constans/Status\";\n\nimport { Movies } from \"components/Movies/Movies\";\nimport { Loading, NotFound, Section, Title } from \"components/Common/Common.styled\";\n\nconst HomePage = () => {\n\tconst [movies, setMovies] = useState([]);\n\tconst [status, setStatus] = useState(STATUS.idle);\n\n\tuseEffect(() => {\n\t\tconst getMovies = async () => {\n\t\t\tsetStatus(STATUS.loading);\n\t\t\ttry {\n\t\t\t\tconst data = await fetchTrendingMovies();\n\t\t\t\tonResolve(data);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t\tsetStatus(STATUS.error);\n\t\t\t}\n\t\t};\n\t\tgetMovies();\n\t}, []);\n\n\tconst onResolve = data => {\n\t\tconst movie = data.map(({ id, poster_path, original_title }) => ({\n\t\t\tid,\n\t\t\timg: poster_path,\n\t\t\ttitle: original_title,\n\t\t}));\n\t\tsetMovies(movie);\n\t\tsetStatus(STATUS.success);\n\t}\n\n\treturn (\n\t\t<Section>\n\t\t\t{status === STATUS.error && <NotFound>NOT FOUND</NotFound>}\n\t\t\t{status === STATUS.loading && (\n\t\t\t\t<>\n\t\t\t\t\t<Title>Trending today</Title>\n\t\t\t\t\t<Loading>Loading...</Loading>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t{status === STATUS.success && (\n\t\t\t\t<>\n\t\t\t\t\t<Title>Trending today</Title>\n\t\t\t\t\t<Movies movies={movies} />\n\t\t\t\t</>\n\t\t\t)}\n\t\t</Section>\n\t);\n};\n\nexport default HomePage;","import axios from 'axios';\n\nconst API_KEY = 'bf2393b8354e3e35d9cd0d94a6af5ebc';\nconst moviesApi = axios.create({\n\tbaseURL: 'https://api.themoviedb.org/3/',\n});\n\nexport const fetchTrendingMovies = async () => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`trending/movie/day`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn results;\n};\n\nexport const fetchSearchMovies = async searchName => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`search/movie`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t\tquery: searchName,\n\t\t},\n\t});\n\treturn results;\n};\n\nexport const fetchMovieDetailsById = async movieId => {\n\tconst { data } = await moviesApi.get(`movie/${movieId}`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn data;\n};\n\nexport const fetchCastById = async movieId => {\n\tconst {\n\t\tdata: { cast },\n\t} = await moviesApi.get(`movie/${movieId}/credits`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn cast;\n};\n\nexport const fetchReviewsById = async movieId => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`movie/${movieId}/reviews`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn results;\n};"],"names":["Section","styled","Title","NotFound","Loading","List","Item","ImageBox","TitleMovie","IMAGE_URL","STATUS","idle","loading","success","error","Movies","movies","location","useLocation","map","id","img","title","to","state","from","src","alt","width","height","imageReplace","useState","setMovies","status","setStatus","useEffect","getMovies","fetchTrendingMovies","data","onResolve","console","log","movie","poster_path","original_title","API_KEY","moviesApi","axios","baseURL","get","params","api_key","results","fetchSearchMovies","searchName","query","fetchMovieDetailsById","movieId","fetchCastById","cast","fetchReviewsById"],"sourceRoot":""}