{"version":3,"file":"static/js/305.cef03f9a.chunk.js","mappings":"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","sources":["components/Common/Common.styled.jsx","components/Movies/Movies.styled.jsx","constans/ImageURL.js","constans/Status.js","pages/MoviesPage/MoviesPage.styled.jsx","pages/MoviesPage/MoviesPage.jsx","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.section`\n\tpadding: 60px 0;\n`;\n\nexport const Title = styled.h1`\n\tfont-weight: 600;\n\tfont-size: 26px;\n\twhite-space: nowrap;\n\tdisplay: flex;\n\talign-items: center;\n\tflex-direction: row-reverse;\n\tcolumn-gap: 20px;\n\tmargin-bottom: 25px;\n\n\t&::before {\n\t\tcontent: \"\";\n\t\tdisplay: inline-block;\n\t\twidth: 100%;\n\t\theight: 1px;\n\t\tbackground-color: var(--accent);\n\t\ttransform: translateY(2px);\n\t}\n`;\n\nexport const NotFound = styled.p`\n\tfont-weight: 600;\n\tfont-size: 22px;\n\tcolor: var(--accent);\n`;\n\nexport const Loading = styled.p`\n\tfont-size: 20px;\n\tcolor: var(--gray);\n`;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tcolumn-gap: 20px;\n\trow-gap: 40px;\n`;\n\nexport const Item = styled.li`\n\twidth: 232px;\n\tflex-basis: calc((100% - 20px * (5 - 1)) / 5);\n`;\n\nexport const ImageBox = styled.div`\n\theight: 350px;\n\n\timg {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tborder-radius: 10px;\n\t}\n`;\n\nexport const TitleMovie = styled.h2`\n\tfont-weight: 600;\n\tmargin-top: 8px;\n\tline-height: 1.5;\n\tpadding-right: 10px;\n\twhite-space: nowrap;\n\toverflow: hidden;\n\ttext-overflow: ellipsis;\n`;","export const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';","export const STATUS = {\n\tidle: 'idle',\n\tloading: 'loading',\n\tsuccess: 'success',\n\terror: 'error',\n}","import styled from 'styled-components';\n\nexport const Form = styled.form`\n\tmargin-bottom: 40px;\n`;\n\nexport const Input = styled.input`\n\tbackground-color: var(--lightGray);\n\twidth: 500px;\n\theight: 50px;\n\tfont-weight: 500;\n\tcolor: var(--gray);\n\tpadding: 0 20px;\n\tcaret-color: var(--gray);\n\tmargin-right: 10px;\n\tborder-radius: 7px;\n`;\n\nexport const Btn = styled.button`\n\tdisplay: inline-block;\n\tpadding: 0 30px;\n\theight: 50px;\n\tborder-radius: 7px;\n\tbackground-color: var(--secondary);\n\tcolor: #fff;\n\tborder: 1px solid var(--lightGray);\n\ttransition: all var(--anim);\n\n\t&:hover {\n\t\tbackground-color: var(--lightGray);\n\t\tcolor: var(--primary);\n\t\tborder-color: var(--secondary);\n\t}\n`;","import Notiflix from 'notiflix';\nimport { useEffect, useState } from \"react\";\nimport { Link, useLocation, useSearchParams } from \"react-router-dom\";\n\nimport { fetchSearchMovies } from \"services/moviesApi\";\nimport { STATUS } from \"constans/Status\";\n\nimport { IMAGE_URL } from \"constans/ImageURL\";\nimport imageReplace from \"images/poster-not-found.jpg\";\n\nimport { Loading, NotFound, Section, Title } from \"components/Common/Common.styled\";\nimport { ImageBox, Item, List, TitleMovie } from 'components/Movies/Movies.styled';\nimport { Btn, Form, Input } from \"./MoviesPage.styled\";\n\nNotiflix.Notify.init({\n\twidth: '400px',\n\tfontSize: '15px',\n});\n\nconst MoviesPage = () => {\n\tconst [status, setStatus] = useState(STATUS.idle);\n\tconst [searchParams, setSearchParams] = useSearchParams();\n\tconst [movies, setMovies] = useState([]);\n\n\tconst searchName = searchParams.get('query');\n\tconst location = useLocation();\n\n\tconst handleSubmit = e => {\n\t\te.preventDefault();\n\t\tconst { value } = e.target.elements.search;\n\t\tif (value === '') {\n\t\t\tNotiflix.Notify.info('Please, fill in the search field!');\n\t\t}\n\t\tsetMovies([]);\n\t\tsetSearchParams({ query: value });\n\t};\n\n\tuseEffect(() => {\n\t\tif (!searchName) return;\n\t\tif (searchName === '') return;\n\t\tconst getMovies = async () => {\n\t\t\tsetStatus(STATUS.loading);\n\t\t\ttry {\n\t\t\t\tconst data = await fetchSearchMovies(searchName);\n\t\t\t\tonResolve(data);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t\tsetStatus(STATUS.error);\n\t\t\t}\n\t\t};\n\t\tgetMovies();\n\t}, [searchName]);\n\n\tconst onResolve = data => {\n\t\tif (data.length === 0) {\n\t\t\tNotiflix.Notify.failure(\n\t\t\t\t'Sorry, there are no images matching your search query. Please try again.'\n\t\t\t);\n\t\t\tsetStatus(STATUS.idle);\n\t\t\treturn;\n\t\t}\n\t\tconst movie = data.map(({ id, poster_path, original_title }) => ({\n\t\t\tid,\n\t\t\timg: poster_path,\n\t\t\ttitle: original_title,\n\t\t}));\n\t\tsetMovies(movie);\n\t\tsetStatus(STATUS.success);\n\t};\n\n\treturn (\n\t\t<Section>\n\t\t\t<Form onSubmit={handleSubmit}>\n\t\t\t\t<Input type=\"text\" name=\"search\" placeholder=\"Enter movie name\" autoComplete=\"off\" />\n\t\t\t\t<Btn type=\"submit\">Search</Btn>\n\t\t\t</Form>\n\t\t\t{status === STATUS.error && <NotFound>NOT FOUND</NotFound>}\n\t\t\t{status === STATUS.loading && (\n\t\t\t\t<>\n\t\t\t\t\t<Title>Search results</Title>\n\t\t\t\t\t<Loading>Loading...</Loading>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t{status === STATUS.success && (\n\t\t\t\t<>\n\t\t\t\t\t<Title>Search results</Title>\n\t\t\t\t\t<List>\n\t\t\t\t\t\t{movies &&\n\t\t\t\t\t\t\tmovies.map(({ id, img, title }) => (\n\t\t\t\t\t\t\t\t<Item key={id}>\n\t\t\t\t\t\t\t\t\t<Link to={`${id}`} state={{ from: location }}>\n\t\t\t\t\t\t\t\t\t\t<ImageBox>\n\t\t\t\t\t\t\t\t\t\t\t{img ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<img src={`${IMAGE_URL}` + img} alt={title} width={232} height={350} />\n\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t<img src={imageReplace} alt=\"Plug\" width={232} height={350} />\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</ImageBox>\n\t\t\t\t\t\t\t\t\t\t<TitleMovie>{title}</TitleMovie>\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</Item>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t</List>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</Section>\n\t);\n};\n\nexport default MoviesPage;","import axios from 'axios';\n\nconst API_KEY = 'bf2393b8354e3e35d9cd0d94a6af5ebc';\nconst moviesApi = axios.create({\n\tbaseURL: 'https://api.themoviedb.org/3/',\n});\n\nexport const fetchTrendingMovies = async () => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`trending/movie/day`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn results;\n};\n\nexport const fetchSearchMovies = async searchName => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`search/movie`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t\tquery: searchName,\n\t\t},\n\t});\n\treturn results;\n};\n\nexport const fetchMovieDetailsById = async movieId => {\n\tconst { data } = await moviesApi.get(`movie/${movieId}`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn data;\n};\n\nexport const fetchCastById = async movieId => {\n\tconst {\n\t\tdata: { cast },\n\t} = await moviesApi.get(`movie/${movieId}/credits`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn cast;\n};\n\nexport const fetchReviewsById = async movieId => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`movie/${movieId}/reviews`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn results;\n};"],"names":["Section","styled","Title","NotFound","Loading","List","Item","ImageBox","TitleMovie","IMAGE_URL","STATUS","idle","loading","success","error","Form","Input","Btn","Notiflix","width","fontSize","useState","status","setStatus","useSearchParams","searchParams","setSearchParams","movies","setMovies","searchName","get","location","useLocation","useEffect","getMovies","fetchSearchMovies","data","onResolve","console","log","length","movie","map","id","img","poster_path","title","original_title","onSubmit","e","preventDefault","value","target","elements","search","query","type","name","placeholder","autoComplete","to","state","from","src","alt","height","imageReplace","API_KEY","moviesApi","axios","baseURL","fetchTrendingMovies","params","api_key","results","fetchMovieDetailsById","movieId","fetchCastById","cast","fetchReviewsById"],"sourceRoot":""}