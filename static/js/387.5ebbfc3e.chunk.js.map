{"version":3,"file":"static/js/387.5ebbfc3e.chunk.js","mappings":"8QAEaA,EAAUC,EAAAA,GAAAA,QAAH,4CAIPC,EAAQD,EAAAA,GAAAA,GAAH,+XAoBLE,EAAWF,EAAAA,GAAAA,EAAH,0FAMRG,EAAUH,EAAAA,GAAAA,EAAH,kE,yLC9BPI,EAAOJ,EAAAA,GAAAA,GAAH,uFAMJK,EAAOL,EAAAA,GAAAA,EAAH,yFAMJM,EAAON,EAAAA,GAAAA,EAAH,wF,SC6CjB,EAlDgB,WACf,OAA8BO,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAASG,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACT,IAAMC,EAAU,mCAAG,WAAMC,GAAN,8EAClBL,EAAUF,EAAAA,EAAAA,SADQ,mBAGEQ,EAAAA,EAAAA,IAAiBD,GAHnB,OAGXE,EAHW,OAIjBC,EAAUD,GAJO,gDAMjBE,QAAQC,IAAR,MACAV,EAAUF,EAAAA,EAAAA,OAPO,yDAAH,sDAUhBM,EAAWH,EACX,GAAE,CAACA,IAEJ,IAAMO,EAAY,SAAAD,GACjB,IAAMI,EAAcJ,EAAKK,KAAI,kBAA8B,CAC1DC,GAD4B,EAAGA,GAE/BC,OAF4B,EAAOA,OAGnCC,QAH4B,EAAeA,QAAf,IAK7BlB,EAAWc,GACXX,EAAUF,EAAAA,EAAAA,QACV,EAED,OACC,gCACEC,IAAWD,EAAAA,EAAAA,QAAgB,SAAC,KAAD,wBAC3BC,IAAWD,EAAAA,EAAAA,UAAkB,SAAC,KAAD,yBAC7BC,IAAWD,EAAAA,EAAAA,SAAqC,IAAnBF,EAAQoB,QACrC,qEAEA,SAACxB,EAAD,UACEI,EAAQgB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACZ,2BACC,SAACtB,EAAD,UAAOqB,KACP,SAACpB,EAAD,UAAOqB,MAFCF,EADG,QAUjB,C,uDCzDM,IAAMf,EAAS,CACrBmB,KAAM,OACNC,QAAS,UACTC,QAAS,UACTC,MAAO,Q,mMCFFC,EAAU,mCACVC,EAAYC,EAAAA,EAAAA,OAAa,CAC9BC,QAAS,kCAGGC,EAAmB,mCAAG,sGAGxBH,EAAUI,IAAV,qBAAoC,CAC7CC,OAAQ,CACPC,QAASP,KALuB,uBAEzBQ,EAFyB,EAEjCtB,KAAQsB,QAFyB,kBAQ3BA,GAR2B,2CAAH,qDAWnBC,EAAiB,mCAAG,WAAMC,GAAN,yFAGtBT,EAAUI,IAAV,eAA8B,CACvCC,OAAQ,CACPC,QAASP,EACThB,MAAO0B,KANuB,uBAEvBF,EAFuB,EAE/BtB,KAAQsB,QAFuB,kBASzBA,GATyB,2CAAH,sDAYjBG,EAAqB,mCAAG,WAAM/B,GAAN,yFACbqB,EAAUI,IAAV,gBAAuBzB,GAAW,CACxD0B,OAAQ,CACPC,QAASP,KAHyB,uBAC5Bd,EAD4B,EAC5BA,KAD4B,kBAM7BA,GAN6B,2CAAH,sDASrB0B,EAAa,mCAAG,WAAMhC,GAAN,yFAGlBqB,EAAUI,IAAV,gBAAuBzB,EAAvB,YAA0C,CACnD0B,OAAQ,CACPC,QAASP,KALiB,uBAEnBa,EAFmB,EAE3B3B,KAAQ2B,KAFmB,kBAQrBA,GARqB,2CAAH,sDAWb5B,EAAgB,mCAAG,WAAML,GAAN,yFAGrBqB,EAAUI,IAAV,gBAAuBzB,EAAvB,YAA0C,CACnD0B,OAAQ,CACPC,QAASP,KALoB,uBAEtBQ,EAFsB,EAE9BtB,KAAQsB,QAFsB,kBAQxBA,GARwB,2CAAH,qD","sources":["components/Common/Common.styled.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","constans/Status.js","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.section`\n\tpadding: 60px 0;\n`;\n\nexport const Title = styled.h1`\n\tfont-weight: 600;\n\tfont-size: 26px;\n\twhite-space: nowrap;\n\tdisplay: flex;\n\talign-items: center;\n\tflex-direction: row-reverse;\n\tcolumn-gap: 20px;\n\tmargin-bottom: 25px;\n\n\t&::before {\n\t\tcontent: \"\";\n\t\tdisplay: inline-block;\n\t\twidth: 100%;\n\t\theight: 1px;\n\t\tbackground-color: var(--accent);\n\t\ttransform: translateY(2px);\n\t}\n`;\n\nexport const NotFound = styled.p`\n\tfont-weight: 600;\n\tfont-size: 22px;\n\tcolor: var(--accent);\n`;\n\nexport const Loading = styled.p`\n\tfont-size: 20px;\n\tcolor: var(--gray);\n`;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n\tdisplay: flex;\n\tflex-direction: column;\n\trow-gap: 30px;\n`;\n\nexport const Name = styled.p`\n\tfont-weight: 600;\n\tfont-size: 18px;\n\tmargin-bottom: 10px;\n`;\n\nexport const Text = styled.p`\n\tfont-size: 14px;\n\tline-height: 1.4;\n\tcolor: var(--gray);\n`;","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport { fetchReviewsById } from \"services/moviesApi\";\nimport { STATUS } from \"constans/Status\";\n\nimport { Loading, NotFound } from \"components/Common/Common.styled\";\nimport { List, Name, Text } from \"./Reviews.styled\";\n\nconst Reviews = () => {\n\tconst [reviews, setReviews] = useState([]);\n\tconst [status, setStatus] = useState(STATUS.idle);\n\n\tconst { movieId } = useParams();\n\n\tuseEffect(() => {\n\t\tconst getReviews = async query => {\n\t\t\tsetStatus(STATUS.loading);\n\t\t\ttry {\n\t\t\t\tconst data = await fetchReviewsById(query);\n\t\t\t\tonResolve(data);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t\tsetStatus(STATUS.error);\n\t\t\t}\n\t\t};\n\t\tgetReviews(movieId);\n\t}, [movieId]);\n\n\tconst onResolve = data => {\n\t\tconst dataReviews = data.map(({ id, author, content }) => ({\n\t\t\tid,\n\t\t\tauthor,\n\t\t\tcontent,\n\t\t}));\n\t\tsetReviews(dataReviews);\n\t\tsetStatus(STATUS.success);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t{status === STATUS.error && <NotFound>NOT FOUND</NotFound>}\n\t\t\t{status === STATUS.loading && <Loading>Loading...</Loading>}\n\t\t\t{status === STATUS.success && reviews.length === 0 ? (\n\t\t\t\t<p>We don`t have any reviews for this movie</p>\n\t\t\t) : (\n\t\t\t\t<List>\n\t\t\t\t\t{reviews.map(({ id, author, content }) => (\n\t\t\t\t\t\t<li key={id}>\n\t\t\t\t\t\t\t<Name>{author}</Name>\n\t\t\t\t\t\t\t<Text>{content}</Text>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</List>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default Reviews;","export const STATUS = {\n\tidle: 'idle',\n\tloading: 'loading',\n\tsuccess: 'success',\n\terror: 'error',\n}","import axios from 'axios';\n\nconst API_KEY = 'bf2393b8354e3e35d9cd0d94a6af5ebc';\nconst moviesApi = axios.create({\n\tbaseURL: 'https://api.themoviedb.org/3/',\n});\n\nexport const fetchTrendingMovies = async () => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`trending/movie/day`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn results;\n};\n\nexport const fetchSearchMovies = async searchName => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`search/movie`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t\tquery: searchName,\n\t\t},\n\t});\n\treturn results;\n};\n\nexport const fetchMovieDetailsById = async movieId => {\n\tconst { data } = await moviesApi.get(`movie/${movieId}`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn data;\n};\n\nexport const fetchCastById = async movieId => {\n\tconst {\n\t\tdata: { cast },\n\t} = await moviesApi.get(`movie/${movieId}/credits`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn cast;\n};\n\nexport const fetchReviewsById = async movieId => {\n\tconst {\n\t\tdata: { results },\n\t} = await moviesApi.get(`movie/${movieId}/reviews`, {\n\t\tparams: {\n\t\t\tapi_key: API_KEY,\n\t\t},\n\t});\n\treturn results;\n};"],"names":["Section","styled","Title","NotFound","Loading","List","Name","Text","useState","reviews","setReviews","STATUS","status","setStatus","movieId","useParams","useEffect","getReviews","query","fetchReviewsById","data","onResolve","console","log","dataReviews","map","id","author","content","length","idle","loading","success","error","API_KEY","moviesApi","axios","baseURL","fetchTrendingMovies","get","params","api_key","results","fetchSearchMovies","searchName","fetchMovieDetailsById","fetchCastById","cast"],"sourceRoot":""}